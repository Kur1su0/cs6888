        -:    0:Source:tcas.c
        -:    0:Graph:tcas.gcno
        -:    0:Data:tcas.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* $Log: tcas.c,v $
        -:    3: * Revision 10/2020 elbaum -- fault version
        -:    4: * */
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define OLEV       600		/* in feets/minute */
        -:   10:#define MAXALTDIFF 600		/* max altitude difference in feet */
        -:   11:#define MINSEP     300          /* min separation in feet */
        -:   12:#define NOZCROSS   100		/* in feet */
        -:   13:				/* variables */
        -:   14:
        -:   15:typedef int bool;
        -:   16:
        -:   17:int Cur_Vertical_Sep;
        -:   18:bool High_Confidence;
        -:   19:bool Two_of_Three_Reports_Valid;
        -:   20:
        -:   21:int Own_Tracked_Alt;
        -:   22:int Own_Tracked_Alt_Rate;
        -:   23:int Other_Tracked_Alt;
        -:   24:
        -:   25:int Alt_Layer_Value;		/* 0, 1, 2, 3 */
        -:   26:int Positive_RA_Alt_Thresh[4];
        -:   27:
        -:   28:int Up_Separation;
        -:   29:int Down_Separation;
        -:   30:
        -:   31:				/* state variables */
        -:   32:int Other_RAC;			/* NO_INTENT, DO_NOT_CLIMB, DO_NOT_DESCEND */
        -:   33:#define NO_INTENT 0
        -:   34:#define DO_NOT_CLIMB 1
        -:   35:#define DO_NOT_DESCEND 2
        -:   36:
        -:   37:int Other_Capability;		/* TCAS_TA, OTHER */
        -:   38:#define TCAS_TA 1
        -:   39:#define OTHER 2
        -:   40:
        -:   41:int Climb_Inhibit;		/* true/false */
        -:   42:
        -:   43:#define UNRESOLVED 0
        -:   44:#define UPWARD_RA 1
        -:   45:#define DOWNWARD_RA 2
        -:   46:
        1:   47:void initialize()
        -:   48:{
        1:   49:    Positive_RA_Alt_Thresh[0] = 400;
        1:   50:    Positive_RA_Alt_Thresh[1] = 500;
        1:   51:    Positive_RA_Alt_Thresh[2] = 640;
        1:   52:    Positive_RA_Alt_Thresh[3] = 740;
        1:   53:}
        -:   54:
        2:   55:int ALIM ()
        -:   56:{
        2:   57: return Positive_RA_Alt_Thresh[Alt_Layer_Value];
        -:   58:}
        -:   59:
        2:   60:int Inhibit_Biased_Climb ()
        -:   61:{
       2*:   62:    return (Climb_Inhibit ? Up_Separation + NOZCROSS : Up_Separation);
        -:   63:}
        -:   64:
        4:   65:bool Own_Below_Threat()
        -:   66:{
        4:   67:    return (Own_Tracked_Alt < Other_Tracked_Alt);
        -:   68:}
        -:   69:
    #####:   70:bool Own_Above_Threat()
        -:   71:{
    #####:   72:    return (Other_Tracked_Alt < Own_Tracked_Alt);
        -:   73:}
        -:   74:
        1:   75:bool Non_Crossing_Biased_Climb()
        -:   76:{
        -:   77:    int upward_preferred;
        -:   78:    bool result;
        -:   79:
        1:   80:    upward_preferred = Inhibit_Biased_Climb() > Down_Separation;
        1:   81:    if (upward_preferred)
        -:   82:    {
       1*:   83:	result = !(Own_Below_Threat()) || ((Own_Below_Threat()) && (!(Down_Separation >= ALIM())));
        -:   84:    }
        -:   85:    else
        -:   86:    {	
    #####:   87:	result = Own_Above_Threat() && (Cur_Vertical_Sep >= MINSEP) && (Up_Separation >= ALIM());
        -:   88:    }
        1:   89:    return result;
        -:   90:}
        -:   91:
        1:   92:bool Non_Crossing_Biased_Descend()
        -:   93:{
        -:   94:    int upward_preferred;
        -:   95:    bool result;
        -:   96:
        1:   97:    upward_preferred = Inhibit_Biased_Climb() > Down_Separation;
        1:   98:    if (upward_preferred)
        -:   99:    {
       1*:  100:	result = Own_Below_Threat() && (Cur_Vertical_Sep >= MINSEP) && (Down_Separation >= ALIM());
        -:  101:    }
        -:  102:    else
        -:  103:    {
    #####:  104:	result =   Own_Above_Threat() && (Up_Separation >= ALIM());
        -:  105:    }
        1:  106:    return result;
        -:  107:}
        -:  108:
        -:  109:
        1:  110:int alt_sep_test()
        -:  111:{
        -:  112:    bool enabled, tcas_equipped, intent_not_known;
        -:  113:    bool need_upward_RA, need_downward_RA;
        -:  114:    int alt_sep;
        -:  115:
       1*:  116:    enabled = High_Confidence && (Own_Tracked_Alt_Rate <= OLEV);  
        1:  117:    tcas_equipped = Other_Capability == TCAS_TA;
       1*:  118:    intent_not_known = Two_of_Three_Reports_Valid && Other_RAC == NO_INTENT;
        -:  119:    
        1:  120:    alt_sep = UNRESOLVED;
        -:  121:    
       1*:  122:    if (enabled && ((tcas_equipped && intent_not_known) || !tcas_equipped))
        -:  123:    {
       1*:  124:	need_upward_RA = Non_Crossing_Biased_Climb() && Own_Below_Threat();
       1*:  125:	need_downward_RA = Non_Crossing_Biased_Descend() && Own_Above_Threat();
        1:  126:	if (need_upward_RA && need_downward_RA)
        -:  127:        /* intentionally unreachable: requires Own_Below_Threat and Own_Above_Threat
        -:  128:           to both be true - that requires Own_Tracked_Alt < Other_Tracked_Alt
        -:  129:           and Other_Tracked_Alt < Own_Tracked_Alt, which isn't possible */
    #####:  130:	    alt_sep = UNRESOLVED;
        1:  131:	else if (need_upward_RA)
        1:  132:	    alt_sep = UPWARD_RA;
    #####:  133:	else if (need_downward_RA)
    #####:  134:	    alt_sep = DOWNWARD_RA;
        -:  135:	else
    #####:  136:	    alt_sep = UNRESOLVED;
        -:  137:    }
        -:  138:    
        1:  139:    return alt_sep;
        -:  140:}
        -:  141:
        1:  142:int main(argc, argv)
        -:  143:int argc;
        -:  144:char *argv[];
        -:  145:{
        1:  146:    if(argc < 13)
        -:  147:    {
    #####:  148:	fprintf(stdout, "Error: Command line arguments");
    #####:  149:	exit(1);
        -:  150:    }
        1:  151:    initialize();
        1:  152:    Cur_Vertical_Sep = atoi(argv[1]);
        1:  153:    High_Confidence = atoi(argv[2]);
        1:  154:    Two_of_Three_Reports_Valid = atoi(argv[3]);
        1:  155:    Own_Tracked_Alt = atoi(argv[4]);
        1:  156:    Own_Tracked_Alt_Rate = atoi(argv[5]);
        1:  157:    Other_Tracked_Alt = atoi(argv[6]);
        1:  158:    Alt_Layer_Value = atoi(argv[7]);
        1:  159:    Up_Separation = atoi(argv[8]);
        1:  160:    Down_Separation = atoi(argv[9]);
        1:  161:    Other_RAC = atoi(argv[10]);
        1:  162:    Other_Capability = atoi(argv[11]);
        1:  163:    Climb_Inhibit = atoi(argv[12]);
        -:  164:
        1:  165:    fprintf(stdout, "%d\n", alt_sep_test());
        1:  166:    exit(0);
        -:  167:}
